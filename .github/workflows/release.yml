name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary_name: mysql-mcp-server
            asset_name: mysql-mcp-server-linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            binary_name: mysql-mcp-server
            asset_name: mysql-mcp-server-linux-arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            binary_name: mysql-mcp-server
            asset_name: mysql-mcp-server-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            binary_name: mysql-mcp-server
            asset_name: mysql-mcp-server-darwin-arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary_name: mysql-mcp-server.exe
            asset_name: mysql-mcp-server-windows-amd64.exe

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.6'

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -ldflags="-s -w -X main.Version=${{ github.ref_name }}" -o ${{ matrix.binary_name }}

      - name: Create archive
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            7z a -tzip ${{ matrix.asset_name }}.zip ${{ matrix.binary_name }} README.md LICENSE
          else
            tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }} README.md LICENSE
          fi
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.tar.gz
            ${{ matrix.asset_name }}.zip
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts/ -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release-assets/
          ls -la release-assets/

      - name: Generate checksums
        run: |
          cd release-assets
          sha256sum *.tar.gz *.zip > checksums.txt
          cat checksums.txt

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          
          # Generate PR list with titles
          if [ -z "$PREV_TAG" ]; then
            echo "First release - showing all changes"
            # Try to get PR merges first
            COMMITS=$(git log --merges --pretty=format:"%s|%h" --reverse | while IFS='|' read -r msg hash; do
              if [[ $msg =~ ^Merge\ pull\ request\ #([0-9]+)\ from\ (.+)$ ]]; then
                PR_NUM="${BASH_REMATCH[1]}"
                BRANCH="${BASH_REMATCH[2]}"
                PR_TITLE=$(git log -1 --format=%b $hash | head -n1 | sed 's/^[[:space:]]*//')
                if [ -z "$PR_TITLE" ]; then
                  PR_TITLE=$(echo "$BRANCH" | sed 's/.*\///' | sed 's/-/ /g' | sed 's/\b\(.\)/\u\1/g')
                fi
                echo "- #$PR_NUM: $PR_TITLE"
              else
                echo "- $msg"
              fi
            done)
            # If no PR merges found, fall back to all commits
            if [ -z "$COMMITS" ]; then
              echo "No PR merges found, showing all commits"
              COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse | head -20)
            fi
          else
            echo "Comparing with previous tag: $PREV_TAG"
            COMMITS=$(git log ${PREV_TAG}..HEAD --merges --pretty=format:"%s|%h" --reverse | while IFS='|' read -r msg hash; do
              if [[ $msg =~ ^Merge\ pull\ request\ #([0-9]+)\ from\ (.+)$ ]]; then
                PR_NUM="${BASH_REMATCH[1]}"
                BRANCH="${BASH_REMATCH[2]}"
                PR_TITLE=$(git log -1 --format=%b $hash | head -n1 | sed 's/^[[:space:]]*//')
                if [ -z "$PR_TITLE" ]; then
                  PR_TITLE=$(echo "$BRANCH" | sed 's/.*\///' | sed 's/-/ /g' | sed 's/\b\(.\)/\u\1/g')
                fi
                echo "- #$PR_NUM: $PR_TITLE"
              else
                echo "- $msg"
              fi
            done)
            # If no PR merges found, fall back to all commits
            if [ -z "$COMMITS" ]; then
              echo "No PR merges found since $PREV_TAG, showing all commits"
              COMMITS=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
            fi
          fi
          
          # Ensure COMMITS is not empty
          if [ -z "$COMMITS" ]; then
            COMMITS="- Initial release"
          fi
          
          cat > release_notes.md << 'EOF'
          ## What's New in ${{ github.ref_name }}

          This release includes pre-built binaries for multiple platforms and architectures.

          ### Changes since last release
          
          EOF
          
          echo "$COMMITS" >> release_notes.md
          
          cat >> release_notes.md << 'EOF'

          ### Installation

          **Linux (amd64):**
          ```bash
          curl -L https://github.com/koh-yoshimoto/mysql-mcp-server/releases/download/${{ github.ref_name }}/mysql-mcp-server-linux-amd64.tar.gz | tar xz
          chmod +x mysql-mcp-server
          sudo mv mysql-mcp-server /usr/local/bin/
          ```

          **macOS (Apple Silicon):**
          ```bash
          curl -L https://github.com/koh-yoshimoto/mysql-mcp-server/releases/download/${{ github.ref_name }}/mysql-mcp-server-darwin-arm64.tar.gz | tar xz
          chmod +x mysql-mcp-server
          sudo mv mysql-mcp-server /usr/local/bin/
          ```

          **macOS (Intel):**
          ```bash
          curl -L https://github.com/koh-yoshimoto/mysql-mcp-server/releases/download/${{ github.ref_name }}/mysql-mcp-server-darwin-amd64.tar.gz | tar xz
          chmod +x mysql-mcp-server
          sudo mv mysql-mcp-server /usr/local/bin/
          ```

          **Windows:**
          Download the `.zip` file and extract `mysql-mcp-server.exe` to a directory in your PATH.

          ### Supported Platforms
          - Linux (amd64, arm64)
          - macOS (amd64, arm64)
          - Windows (amd64)

          ### Verification
          After installation, verify with:
          ```bash
          mysql-mcp-server --version
          ```

          ### Documentation
          See the [README](https://github.com/koh-yoshimoto/mysql-mcp-server/blob/main/README.md) for configuration and usage instructions.
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: release_notes.md
          files: |
            release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}